{"version":3,"file":"PokemonService.js","sources":["../src/services/CandyService.js","../src/utils/SecurityValidator.js","../src/services/PokemonService.js"],"sourcesContent":["import { AuthDebugger } from '../utils/AuthDebugger.js';\r\n\r\n/**\r\n * Service for handling candy-related operations.\r\n * Note: Candy modifications (adding candy) are handled by the background script.\r\n * This service only handles reading candy data.\r\n */\r\nexport class CandyService {\r\n    /**\r\n     * @param {AppState} appState - The application state.\r\n     */\r\n    constructor(appState) {\r\n        this.state = appState;\r\n        this.maxRetries = 3;\r\n        this.retryDelay = 1000; // 1 second\r\n    }\r\n\r\n    /**\r\n     * Waits for authentication to be ready with retry logic.\r\n     * @param {number} maxWaitTime - Maximum time to wait in milliseconds.\r\n     * @returns {Promise<boolean>} - True if authenticated, false if timeout.\r\n     */\r\n    async waitForAuthentication(maxWaitTime = 5000) {\r\n        const startTime = Date.now();\r\n        \r\n        while (Date.now() - startTime < maxWaitTime) {\r\n            if (this.state.canSync()) {\r\n                console.log('‚úÖ Authentication ready for candy operations');\r\n                return true;\r\n            }\r\n            \r\n            // Check what's missing for better debugging\r\n            const issues = [];\r\n            if (!this.state.currentUser) issues.push('user not logged in');\r\n            if (!this.state.supabase) issues.push('supabase not initialized');\r\n            if (!navigator.onLine) issues.push('browser offline');\r\n            \r\n            console.log(`‚è≥ Waiting for authentication... Issues: ${issues.join(', ')}`);\r\n            \r\n            // Wait 500ms before checking again\r\n            await new Promise(resolve => setTimeout(resolve, 500));\r\n        }\r\n        \r\n        console.log('‚è∞ Authentication wait timeout reached');\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Retrieves all candy data for the current user.\r\n     * @returns {Promise<Map>} - A map of pokemon_id -> candy_count.\r\n     */\r\n    async getCandyForUser() {\r\n        // Debug authentication state before attempting candy fetch\r\n        AuthDebugger.logAuthState('CandyService.getCandyForUser - Start', this.state);\r\n        \r\n        // First, try to wait for authentication if not immediately available\r\n        if (!this.state.canSync()) {\r\n            console.log('üîÑ Authentication not ready, waiting...');\r\n            const authReady = await AuthDebugger.waitForAuthWithLogging(\r\n                this.state, \r\n                5000, \r\n                'CandyService.getCandyForUser'\r\n            );\r\n            \r\n            if (!authReady) {\r\n                console.log('‚ùå Cannot sync candy data - authentication timeout');\r\n                AuthDebugger.logAuthState('CandyService.getCandyForUser - Timeout', this.state);\r\n                return new Map();\r\n            }\r\n        }\r\n\r\n        try {\r\n            console.log('üç¨ Fetching candy data for user:', this.state.currentUser.email);\r\n\r\n            const { data: candyData, error } = await this.state.supabase\r\n                .from('candies')\r\n                .select('pokemon_id, candy_count')\r\n                .eq('user_id', this.state.currentUser.id);\r\n\r\n            if (error) {\r\n                console.error('‚ùå Error fetching candy data:', error);\r\n                throw error;\r\n            }\r\n\r\n            const candyMap = new Map();\r\n            if (candyData && candyData.length > 0) {\r\n                candyData.forEach(candy => {\r\n                    candyMap.set(candy.pokemon_id, candy.candy_count);\r\n                });\r\n                console.log(`‚úÖ Loaded candy data for ${candyData.length} Pokemon`);\r\n            } else {\r\n                console.log('üì≠ No candy data found for user');\r\n            }\r\n\r\n            // Update local state\r\n            this.state.setCandyData(candyMap);\r\n            return candyMap;\r\n        } catch (error) {\r\n            console.error('‚ùå Error fetching candy data:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the candy count for a specific Pok√©mon from local state.\r\n     * @param {number} pokemonId - The Pok√©mon ID.\r\n     * @returns {number} - The candy count (0 if none).\r\n     */\r\n    getCandyCount(pokemonId) {\r\n        const count = this.state.getCandyCount(pokemonId);\r\n        console.log(`üç¨ Candy count for Pokemon ${pokemonId}: ${count}`);\r\n        return count;\r\n    }\r\n\r\n    /**\r\n     * Refreshes candy data from the database.\r\n     * @returns {Promise<Map>} - Updated candy map.\r\n     */\r\n    async refreshCandyData() {\r\n        console.log('üîÑ Refreshing candy data from database');\r\n        return await this.getCandyForUser();\r\n    }\r\n}\r\n","import { CONFIG } from '../shared/config.js';\r\n\r\n/**\r\n * Security validation utilities for protecting against abuse\r\n */\r\nexport class SecurityValidator {\r\n    \r\n    /**\r\n     * Validates Pokemon data before database operations\r\n     */\r\n    static validatePokemonData(pokemon) {\r\n        const errors = [];\r\n\r\n        // Basic required fields\r\n        if (!pokemon.id || !Number.isInteger(pokemon.id) || pokemon.id < 1 || pokemon.id > 1010) {\r\n            errors.push('Invalid Pokemon ID');\r\n        }\r\n\r\n        if (!pokemon.name || typeof pokemon.name !== 'string' || pokemon.name.length > 50) {\r\n            errors.push('Invalid Pokemon name');\r\n        }\r\n\r\n        if (!pokemon.site || typeof pokemon.site !== 'string' || pokemon.site.length > 200) {\r\n            errors.push('Invalid site URL');\r\n        }\r\n\r\n        // Validate timestamps\r\n        const caughtAt = new Date(pokemon.caughtAt);\r\n        if (isNaN(caughtAt.getTime()) || caughtAt > new Date()) {\r\n            errors.push('Invalid caught date');\r\n        }\r\n\r\n        // Validate level if present\r\n        if (pokemon.level !== undefined && (!Number.isInteger(pokemon.level) || pokemon.level < 1 || pokemon.level > 100)) {\r\n            errors.push('Invalid Pokemon level');\r\n        }\r\n\r\n        // Validate boolean fields\r\n        if (pokemon.shiny !== undefined && typeof pokemon.shiny !== 'boolean') {\r\n            errors.push('Invalid shiny flag');\r\n        }\r\n\r\n        return {\r\n            isValid: errors.length === 0,\r\n            errors\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Validates candy operations\r\n     */\r\n    static validateCandyOperation(pokemonId, amount) {\r\n        const errors = [];\r\n\r\n        if (!pokemonId || !Number.isInteger(pokemonId) || pokemonId < 1 || pokemonId > 1010) {\r\n            errors.push('Invalid Pokemon ID for candy operation');\r\n        }\r\n\r\n        if (!Number.isInteger(amount) || amount < 0 || amount > 1000) {\r\n            errors.push('Invalid candy amount (must be 0-1000)');\r\n        }\r\n\r\n        return {\r\n            isValid: errors.length === 0,\r\n            errors\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Validates batch operations to prevent abuse\r\n     */\r\n    static validateBatchSize(items) {\r\n        if (!Array.isArray(items)) {\r\n            return {\r\n                isValid: false,\r\n                errors: ['Batch data must be an array']\r\n            };\r\n        }\r\n\r\n        if (items.length > CONFIG.MAX_BATCH_SIZE) {\r\n            return {\r\n                isValid: false,\r\n                errors: [`Batch size too large (max ${CONFIG.MAX_BATCH_SIZE})`]\r\n            };\r\n        }\r\n\r\n        return {\r\n            isValid: true,\r\n            errors: []\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Rate limiting check (simple client-side implementation)\r\n     */\r\n    static checkRateLimit(operation, userId = 'anonymous') {\r\n        if (!CONFIG.RATE_LIMITING) {\r\n            return { allowed: true };\r\n        }\r\n\r\n        const key = `rate_limit_${operation}_${userId}`;\r\n        const now = Date.now();\r\n        \r\n        // Get stored rate limit data\r\n        const stored = localStorage.getItem(key);\r\n        let rateLimitData = stored ? JSON.parse(stored) : { count: 0, windowStart: now };\r\n\r\n        // Check if we're in a new time window (1 minute)\r\n        const windowDuration = 60000; // 1 minute\r\n        if (now - rateLimitData.windowStart > windowDuration) {\r\n            rateLimitData = { count: 0, windowStart: now };\r\n        }\r\n\r\n        // Define rate limits per operation\r\n        const limits = {\r\n            'sync': 10,\r\n            'catch_pokemon': 50,\r\n            'evolve': 20,\r\n            'release': 30,\r\n            'candy_operation': 100\r\n        };\r\n\r\n        const limit = limits[operation] || 30; // Default limit\r\n\r\n        if (rateLimitData.count >= limit) {\r\n            return {\r\n                allowed: false,\r\n                error: `Rate limit exceeded for ${operation}. Try again later.`,\r\n                retryAfter: windowDuration - (now - rateLimitData.windowStart)\r\n            };\r\n        }\r\n\r\n        // Increment and store\r\n        rateLimitData.count++;\r\n        localStorage.setItem(key, JSON.stringify(rateLimitData));\r\n\r\n        return { allowed: true };\r\n    }\r\n\r\n    /**\r\n     * Sanitizes data before sending to database\r\n     */\r\n    static sanitizeForDatabase(data) {\r\n        if (typeof data !== 'object' || data === null) {\r\n            return data;\r\n        }\r\n\r\n        const sanitized = {};\r\n        \r\n        for (const [key, value] of Object.entries(data)) {\r\n            // Remove any keys that might be injection attempts\r\n            if (key.includes('__') || key.includes('$') || key.includes('..')) {\r\n                console.warn(`Skipping potentially malicious key: ${key}`);\r\n                continue;\r\n            }\r\n\r\n            // Sanitize string values\r\n            if (typeof value === 'string') {\r\n                sanitized[key] = value.trim().substring(0, 1000); // Limit string length\r\n            } else if (typeof value === 'number') {\r\n                sanitized[key] = Number.isFinite(value) ? value : 0;\r\n            } else if (typeof value === 'boolean') {\r\n                sanitized[key] = value;\r\n            } else if (value instanceof Date) {\r\n                sanitized[key] = value.toISOString();\r\n            } else if (Array.isArray(value)) {\r\n                sanitized[key] = value.slice(0, 100); // Limit array size\r\n            } else if (typeof value === 'object') {\r\n                sanitized[key] = this.sanitizeForDatabase(value); // Recursive\r\n            }\r\n        }\r\n\r\n        return sanitized;\r\n    }\r\n\r\n    /**\r\n     * Validates user permissions for operations\r\n     */\r\n    static validateUserPermissions(operation, userData) {\r\n        // For now, basic checks - can be expanded based on user roles\r\n        \r\n        const permissions = {\r\n            'create_pokemon': true,\r\n            'update_pokemon': true,\r\n            'delete_pokemon': true,\r\n            'manage_candies': true,\r\n            'view_history': true\r\n        };\r\n\r\n        return {\r\n            allowed: permissions[operation] !== false,\r\n            error: !permissions[operation] ? `Permission denied for ${operation}` : null\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Comprehensive security check wrapper\r\n     */\r\n    static async validateRequest(operation, data, user = null) {\r\n        const validationResults = [];\r\n\r\n        // Rate limiting check\r\n        if (CONFIG.RATE_LIMITING) {\r\n            const rateLimitResult = this.checkRateLimit(operation, user?.id);\r\n            if (!rateLimitResult.allowed) {\r\n                return {\r\n                    valid: false,\r\n                    error: rateLimitResult.error,\r\n                    retryAfter: rateLimitResult.retryAfter\r\n                };\r\n            }\r\n        }\r\n\r\n        // Data validation\r\n        if (operation === 'catch_pokemon' && data) {\r\n            const pokemonValidation = this.validatePokemonData(data);\r\n            if (!pokemonValidation.isValid) {\r\n                return {\r\n                    valid: false,\r\n                    error: `Invalid Pokemon data: ${pokemonValidation.errors.join(', ')}`\r\n                };\r\n            }\r\n        }\r\n\r\n        if (operation === 'candy_operation' && data) {\r\n            const candyValidation = this.validateCandyOperation(data.pokemonId, data.amount);\r\n            if (!candyValidation.isValid) {\r\n                return {\r\n                    valid: false,\r\n                    error: `Invalid candy operation: ${candyValidation.errors.join(', ')}`\r\n                };\r\n            }\r\n        }\r\n\r\n        if (Array.isArray(data)) {\r\n            const batchValidation = this.validateBatchSize(data);\r\n            if (!batchValidation.isValid) {\r\n                return {\r\n                    valid: false,\r\n                    error: `Batch validation failed: ${batchValidation.errors.join(', ')}`\r\n                };\r\n            }\r\n        }\r\n\r\n        // User permissions\r\n        const permissionResult = this.validateUserPermissions(operation, user);\r\n        if (!permissionResult.allowed) {\r\n            return {\r\n                valid: false,\r\n                error: permissionResult.error\r\n            };\r\n        }\r\n\r\n        return {\r\n            valid: true,\r\n            sanitizedData: this.sanitizeForDatabase(data)\r\n        };\r\n    }\r\n}\r\n","import { StorageService } from './StorageService.js';\r\nimport { APIService } from './ApiService.js';\r\nimport { CONFIG } from '../shared/config.js';\r\nimport { AppState } from '../utils/AppState.js';\r\nimport { CandyService } from './CandyService.js';\r\nimport { HistoryService } from './HistoryService.js';\r\nimport { SecurityValidator } from '../utils/SecurityValidator.js';\r\nimport { supabase } from '../shared/supabase-client.js';\r\n\r\n/**\r\n * Unified Pokemon service that handles all Pokemon-related operations\r\n * Consolidates functionality from PokemonManager, PokedexService, and original PokemonService\r\n */\r\nexport class PokemonService {\r\n    constructor(sharedAppState = null) {\r\n        this.appState = sharedAppState || new AppState();\r\n        this.candyService = null;\r\n        this.historyService = null;\r\n        this.servicesInitialized = false;\r\n        this.allPokemon = [];\r\n        this.userCollection = [];\r\n    }\r\n\r\n    /**\r\n     * Initialize all required services\r\n     */\r\n    async initializeServices() {\r\n        if (this.servicesInitialized) return;\r\n\r\n        try {\r\n            // Initialize Supabase if needed\r\n            if (!this.appState.supabase && CONFIG.SUPABASE_URL && CONFIG.SUPABASE_ANON_KEY) {\r\n                console.log('üîß PokemonService: Initializing Supabase...');\r\n                const client = supabase.createClient(CONFIG.SUPABASE_URL, CONFIG.SUPABASE_ANON_KEY);\r\n                this.appState.setSupabase(client);\r\n\r\n                const { data: { session } } = await client.auth.getSession();\r\n                if (session) {\r\n                    console.log('üîß PokemonService: Found existing session for', session.user.email);\r\n                    this.appState.setUser(session.user);\r\n                }\r\n            }\r\n\r\n            // Initialize dependent services if user is authenticated\r\n            if (this.appState.isLoggedIn()) {\r\n                if (!this.candyService) {\r\n                    this.candyService = new CandyService(this.appState);\r\n                }\r\n                if (!this.historyService) {\r\n                    this.historyService = new HistoryService(this.appState);\r\n                }\r\n            }\r\n\r\n            this.servicesInitialized = true;\r\n            this.appState.logAuthStatus();\r\n        } catch (error) {\r\n            console.error('‚ùå Error initializing PokemonService:', error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Load complete Pokedex data with user collection, candy, and history\r\n     */\r\n    async loadPokedex() {\r\n        await this.initializeServices();\r\n\r\n        const [allPokemon, userCollection] = await Promise.all([\r\n            APIService.fetchAllPokemon(151),\r\n            StorageService.getPokemonCollection()\r\n        ]);\r\n\r\n        this.allPokemon = allPokemon;\r\n        this.userCollection = userCollection;\r\n\r\n        const userCollectionById = new Map(userCollection.map(p => [p.id, p]));\r\n\r\n        // Load candy and history data\r\n        let candyData = new Map();\r\n        let historyData = new Set();\r\n        let firstCaughtDates = new Map();\r\n\r\n        if (this.candyService) {\r\n            try {\r\n                candyData = await this.candyService.getCandyForUser();\r\n            } catch (error) {\r\n                console.error('Error loading candy data:', error);\r\n            }\r\n        }\r\n\r\n        if (this.historyService) {\r\n            try {\r\n                historyData = await this.historyService.getHistoryForUser();\r\n                console.log(`üìö Loaded history for ${historyData.size} Pokemon`);\r\n                \r\n                // Load first caught dates for all Pokemon in history\r\n                for (const pokemonId of historyData) {\r\n                    try {\r\n                        const historyRecord = await this.historyService.getFirstCaughtData(pokemonId);\r\n                        if (historyRecord && historyRecord.first_caught_at) {\r\n                            firstCaughtDates.set(pokemonId, historyRecord.first_caught_at);\r\n                        }\r\n                    } catch (error) {\r\n                        console.error(`Error loading first caught date for Pokemon ${pokemonId}:`, error);\r\n                    }\r\n                }\r\n                console.log(`üìÖ Loaded first caught dates for ${firstCaughtDates.size} Pokemon`);\r\n            } catch (error) {\r\n                console.error('Error loading history data:', error);\r\n            }\r\n        }\r\n\r\n        // Merge all data\r\n        this.allPokemon = this.allPokemon.map(p => {\r\n            const caughtPokemon = userCollectionById.get(p.id);\r\n            const candyCount = candyData.get(p.id) || 0;\r\n            const everOwned = historyData.has(p.id);\r\n            const firstCaughtAt = firstCaughtDates.get(p.id);\r\n            \r\n            if (caughtPokemon) {\r\n                return { \r\n                    ...p, \r\n                    ...caughtPokemon, \r\n                    caught: true, \r\n                    everOwned: true, \r\n                    candyCount,\r\n                    firstCaughtAt: firstCaughtAt || caughtPokemon.caughtAt\r\n                };\r\n            } else {\r\n                return { \r\n                    ...p, \r\n                    caught: false, \r\n                    everOwned, \r\n                    candyCount,\r\n                    firstCaughtAt\r\n                };\r\n            }\r\n        });\r\n\r\n        return this.allPokemon;\r\n    }\r\n\r\n    /**\r\n     * Get collection statistics\r\n     */\r\n    getStats() {\r\n        const total = this.userCollection.length;\r\n        const unique = new Set(this.userCollection.map(p => p.id)).size;\r\n        const everOwnedCount = this.allPokemon ? this.allPokemon.filter(p => p.everOwned).length : 0;\r\n        const completion = ((everOwnedCount / 151) * 100).toFixed(1);\r\n        \r\n        return { total, unique, completion, everOwned: everOwnedCount };\r\n    }\r\n\r\n    /**\r\n     * Filter and sort Pokemon data\r\n     */\r\n    filterAndSort(query, sortBy) {\r\n        let filtered = this.allPokemon;\r\n\r\n        if (query) {\r\n            const lowerQuery = query.toLowerCase();\r\n            filtered = filtered.filter(p =>\r\n                p.name.toLowerCase().includes(lowerQuery) ||\r\n                String(p.id).includes(lowerQuery)\r\n            );\r\n        }\r\n\r\n        switch (sortBy) {\r\n            case 'name':\r\n                filtered.sort((a, b) => a.name.localeCompare(b.name));\r\n                break;\r\n            case 'caughtAt':\r\n                filtered.sort((a, b) => {\r\n                    // Prioritize ever-owned Pokemon\r\n                    if (a.everOwned && !b.everOwned) return -1;\r\n                    if (!a.everOwned && b.everOwned) return 1;\r\n                    if (!a.everOwned && !b.everOwned) return a.id - b.id;\r\n                    \r\n                    // Both have been owned, sort by first caught date\r\n                    const aDate = a.firstCaughtAt || a.caughtAt;\r\n                    const bDate = b.firstCaughtAt || b.caughtAt;\r\n                    \r\n                    if (!aDate && !bDate) return a.id - b.id;\r\n                    if (!aDate) return 1;\r\n                    if (!bDate) return -1;\r\n                    \r\n                    return new Date(bDate) - new Date(aDate); // Most recent first\r\n                });\r\n                break;\r\n            case 'firstCaught':\r\n                filtered.sort((a, b) => {\r\n                    // Prioritize ever-owned Pokemon\r\n                    if (a.everOwned && !b.everOwned) return -1;\r\n                    if (!a.everOwned && b.everOwned) return 1;\r\n                    if (!a.everOwned && !b.everOwned) return a.id - b.id;\r\n                    \r\n                    // Both have been owned, sort by first caught date\r\n                    const aDate = a.firstCaughtAt;\r\n                    const bDate = b.firstCaughtAt;\r\n                    \r\n                    if (!aDate && !bDate) return a.id - b.id;\r\n                    if (!aDate) return 1;\r\n                    if (!bDate) return -1;\r\n                    \r\n                    return new Date(aDate) - new Date(bDate); // Oldest first\r\n                });\r\n                break;\r\n            case 'id':\r\n            default:\r\n                filtered.sort((a, b) => a.id - b.id);\r\n                break;\r\n        }\r\n\r\n        return filtered;\r\n    }\r\n\r\n    /**\r\n     * Catch a Pokemon and add it to the collection\r\n     */\r\n    async catchPokemon(pokemon) {\r\n        try {\r\n            const caughtPokemon = { \r\n                ...pokemon, \r\n                caughtAt: new Date().toISOString(), \r\n                site: window.location.hostname, \r\n                shiny: pokemon.shiny || false \r\n            };\r\n\r\n            // Security: Validate Pokemon data before catching\r\n            const securityCheck = await SecurityValidator.validateRequest('catch_pokemon', caughtPokemon, this.appState.currentUser);\r\n            if (!securityCheck.valid) {\r\n                throw new Error(`Security validation failed: ${securityCheck.error}`);\r\n            }\r\n\r\n            // Use sanitized data\r\n            const sanitizedPokemon = securityCheck.sanitizedData;\r\n\r\n            // Check if user is logged in and can sync to cloud\r\n            if (this.appState.canSync()) {\r\n                console.log('üîÑ User is logged in - saving Pokemon directly to Supabase');\r\n                \r\n                // Save directly to Supabase when logged in\r\n                const pokemonToInsert = {\r\n                    user_id: this.appState.currentUser.id,\r\n                    pokemon_id: sanitizedPokemon.id,\r\n                    name: sanitizedPokemon.name,\r\n                    species: sanitizedPokemon.species || sanitizedPokemon.name,\r\n                    level: sanitizedPokemon.level,\r\n                    shiny: sanitizedPokemon.shiny || false,\r\n                    site_caught: sanitizedPokemon.site,\r\n                    caught_at: sanitizedPokemon.caughtAt\r\n                };\r\n\r\n                const { error: insertError } = await this.appState.supabase\r\n                    .from('pokemon')\r\n                    .insert([pokemonToInsert]);\r\n\r\n                if (insertError) {\r\n                    throw new Error(`Failed to save Pokemon to Supabase: ${insertError.message}`);\r\n                }\r\n\r\n                // Add to pokemon_history table\r\n                if (this.historyService) {\r\n                    await this.historyService.addToHistory(sanitizedPokemon.id);\r\n                }\r\n\r\n                console.log('‚úÖ Pokemon saved directly to Supabase');\r\n                \r\n                // Send message to background script for candy addition\r\n                if (chrome.runtime && chrome.runtime.sendMessage) {\r\n                    try {\r\n                        await chrome.runtime.sendMessage({\r\n                            type: 'POKEMON_CAUGHT',\r\n                            data: { pokemon: sanitizedPokemon }\r\n                        });\r\n                    } catch (candyError) {\r\n                        console.error('‚ùå Error sending Pokemon caught message:', candyError);\r\n                        // Don't fail the catch if candy message fails\r\n                    }\r\n                }\r\n            } else {\r\n                console.log('üì± User is logged out - saving Pokemon to local storage (no candies)');\r\n                \r\n                // Check collection size limits for local storage\r\n                const result = await chrome.storage.local.get(['pokemonCollection']);\r\n                const collection = result.pokemonCollection || [];\r\n                \r\n                if (collection.length >= CONFIG.MAX_POKEMON_PER_USER) {\r\n                    throw new Error(`Collection limit reached (${CONFIG.MAX_POKEMON_PER_USER})`);\r\n                }\r\n\r\n                // Save to local storage when logged out (no candies awarded)\r\n                collection.push(sanitizedPokemon);\r\n                await chrome.storage.local.set({ pokemonCollection: collection });\r\n                \r\n                // Add to local history\r\n                await StorageService.addToHistory(sanitizedPokemon.id);\r\n                \r\n                console.log('‚úÖ Pokemon saved to local storage');\r\n            }\r\n\r\n            return { success: true };\r\n        } catch (error) {\r\n            console.error('Error catching Pokemon:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Release a Pokemon from the collection\r\n     */\r\n    async releasePokemon(pokemonToRelease) {\r\n        try {\r\n            // Remove from cloud if syncing is available\r\n            if (this.appState.canSync()) {\r\n                const { error } = await this.appState.supabase\r\n                    .from('pokemon')\r\n                    .eq('user_id', this.appState.currentUser.id)\r\n                    .eq('pokemon_id', pokemonToRelease.pokemon_id || pokemonToRelease.id)\r\n                    .eq('site_caught', pokemonToRelease.site)\r\n                    .eq('caught_at', pokemonToRelease.caughtAt)\r\n                    .delete();\r\n                if (error) throw error;\r\n            }\r\n\r\n            // Remove from local storage\r\n            const removed = await StorageService.removePokemonFromCollection(pokemonToRelease);\r\n            if (!removed) {\r\n                throw new Error('Pokemon not found in collection');\r\n            }\r\n\r\n            // Send message to background script for candy addition\r\n            if (chrome.runtime && chrome.runtime.sendMessage) {\r\n                try {\r\n                    const response = await chrome.runtime.sendMessage({\r\n                        type: 'POKEMON_RELEASED',\r\n                        data: { pokemon: { id: pokemonToRelease.pokemon_id || pokemonToRelease.id } }\r\n                    });\r\n                    \r\n                    if (response && response.success) {\r\n                        console.log('‚úÖ Pokemon released message sent successfully - Candy added!');\r\n                    }\r\n                } catch (candyError) {\r\n                    console.error('‚ùå Error sending Pokemon released message:', candyError);\r\n                    // Don't fail the release if candy message fails\r\n                }\r\n            }\r\n\r\n            return { success: true };\r\n        } catch (error) {\r\n            console.error('Error releasing Pokemon:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Open Pokemon detail window\r\n     */\r\n    openPokemonDetail(pokemon) {\r\n        const url = chrome.runtime.getURL('dist/src/pokemon-detail/index.html');\r\n        const params = new URLSearchParams({\r\n            id: pokemon.id,\r\n            name: pokemon.name,\r\n            caughtAt: pokemon.caughtAt,\r\n            site: pokemon.site,\r\n            shiny: pokemon.shiny || false\r\n        });\r\n\r\n        chrome.windows.create({\r\n            url: `${url}?${params.toString()}`,\r\n            type: 'popup',\r\n            width: 500,\r\n            height: 600,\r\n            focused: true\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Refresh candy data for all Pokemon\r\n     */\r\n    async refreshCandyData() {\r\n        if (!this.candyService) return this.allPokemon;\r\n\r\n        try {\r\n            const candyData = await this.candyService.getCandyForUser();\r\n            \r\n            this.allPokemon = this.allPokemon.map(p => ({\r\n                ...p,\r\n                candyCount: candyData.get(p.id) || 0\r\n            }));\r\n            \r\n            return this.allPokemon;\r\n        } catch (error) {\r\n            console.error('Error refreshing candy data:', error);\r\n            return this.allPokemon;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Refresh history data for all Pokemon\r\n     */\r\n    async refreshHistoryData() {\r\n        if (!this.historyService) return this.allPokemon;\r\n\r\n        try {\r\n            const historyData = await this.historyService.getHistoryForUser();\r\n            \r\n            this.allPokemon = this.allPokemon.map(p => ({\r\n                ...p,\r\n                everOwned: historyData.has(p.id)\r\n            }));\r\n            \r\n            return this.allPokemon;\r\n        } catch (error) {\r\n            console.error('Error refreshing history data:', error);\r\n            return this.allPokemon;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Refresh all data (candy and history) for all Pokemon\r\n     */\r\n    async refreshAllData() {\r\n        try {\r\n            await this.initializeServices();\r\n            \r\n            let candyData = new Map();\r\n            let historyData = new Set();\r\n\r\n            if (this.candyService) {\r\n                candyData = await this.candyService.getCandyForUser();\r\n            }\r\n\r\n            if (this.historyService) {\r\n                historyData = await this.historyService.getHistoryForUser();\r\n            }\r\n            \r\n            this.allPokemon = this.allPokemon.map(p => ({\r\n                ...p,\r\n                candyCount: candyData.get(p.id) || 0,\r\n                everOwned: historyData.has(p.id)\r\n            }));\r\n            \r\n            return this.allPokemon;\r\n        } catch (error) {\r\n            console.error('Error refreshing all data:', error);\r\n            return this.allPokemon;\r\n        }\r\n    }\r\n}\r\n"],"names":[],"mappings":"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"}