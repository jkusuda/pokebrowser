{"version":3,"file":"AuthService.js","sources":["../src/services/AuthService.js"],"sourcesContent":["import { CONFIG } from '../shared/config.js';\r\nimport { supabase } from '../shared/supabase-client.js';\r\n\r\n// Handles user authentication and session management\r\nexport class AuthService {\r\n    // Initialize auth service with app state\r\n    constructor(appState) {\r\n        this.state = appState;\r\n    }\r\n\r\n    // Set up Supabase client for authentication\r\n    async initializeSupabase() {\r\n        if (!CONFIG.SUPABASE_URL || !CONFIG.SUPABASE_ANON_KEY) {\r\n            throw new Error('Cloud sync not configured');\r\n        }\r\n        if (!supabase?.createClient) {\r\n            throw new Error('Cloud sync library not loaded');\r\n        }\r\n\r\n        const client = supabase.createClient(CONFIG.SUPABASE_URL, CONFIG.SUPABASE_ANON_KEY);\r\n        if (!client?.from) {\r\n            throw new Error('Failed to initialize Supabase client');\r\n        }\r\n\r\n        this.state.setSupabase(client);\r\n        return client;\r\n    }\r\n\r\n    // Get current user session if exists\r\n    async initializeAuth() {\r\n        if (!this.state.supabase) return null;\r\n\r\n        try {\r\n            const { data: { session }, error } = await this.state.supabase.auth.getSession();\r\n            if (error) throw error;\r\n\r\n            if (session) {\r\n                this.state.setUser(session.user);\r\n                return session.user;\r\n            }\r\n            return null;\r\n        } catch (error) {\r\n            console.error('Auth initialization error:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    // Open auth popup and wait for completion\r\n    openAuthPopup() {\r\n        const popup = window.open(chrome.runtime.getURL('dist/src/auth/index.html'), 'auth', 'width=400,height=500');\r\n\r\n        return new Promise((resolve) => {\r\n            const checkAuth = setInterval(async () => {\r\n                if (popup.closed) {\r\n                    clearInterval(checkAuth);\r\n                    const user = await this.initializeAuth();\r\n                    resolve(user);\r\n                }\r\n            }, CONFIG.AUTH_CHECK_INTERVAL);\r\n        });\r\n    }\r\n\r\n    // Sign out user and reset app state\r\n    async handleLogout() {\r\n        try {\r\n            console.log('üîÑ Starting logout process...');\r\n            \r\n            if (this.state.supabase) {\r\n                const { error } = await this.state.supabase.auth.signOut();\r\n                if (error) throw error;\r\n                console.log('‚úÖ Signed out from Supabase');\r\n            }\r\n\r\n            // Reset app state (clears user, supabase cache, etc.)\r\n            this.state.reset();\r\n            console.log('‚úÖ App state reset');\r\n\r\n            // Initialize empty local storage for offline mode\r\n            await chrome.storage.local.set({ \r\n                pokemonCollection: [],\r\n                pokemonHistory: []\r\n            });\r\n            console.log('‚úÖ Local storage initialized for offline mode');\r\n\r\n            return { success: true };\r\n        } catch (error) {\r\n            console.error('Logout error:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    // Listen for auth state changes and notify background script\r\n    setupAuthStateListener(onAuthChange) {\r\n        if (!this.state.supabase) return;\r\n\r\n        this.state.supabase.auth.onAuthStateChange(async (event, session) => {\r\n            console.log('Auth state changed:', event, session?.user?.email);\r\n            const user = session?.user || null;\r\n            this.state.setUser(user);\r\n            \r\n            // Only notify background script for significant auth events (login/logout)\r\n            if (event === 'SIGNED_IN' || event === 'SIGNED_OUT') {\r\n                try {\r\n                    if (chrome.runtime && chrome.runtime.sendMessage) {\r\n                        await chrome.runtime.sendMessage({\r\n                            type: 'AUTH_STATE_CHANGED',\r\n                            data: { session }\r\n                        });\r\n                    }\r\n                } catch (error) {\r\n                    // Silently handle connection errors - background script may not be ready\r\n                    console.log('Background script not available for auth notification');\r\n                }\r\n            }\r\n            \r\n            onAuthChange(event, user);\r\n        });\r\n\r\n        // Set up periodic session refresh to keep user logged in\r\n        this.setupSessionRefresh();\r\n    }\r\n\r\n    // Refresh session every 30 minutes to keep user logged in\r\n    setupSessionRefresh() {\r\n        if (!this.state.supabase) return;\r\n\r\n        // Refresh session every 30 minutes\r\n        setInterval(async () => {\r\n            try {\r\n                const { data: { session }, error } = await this.state.supabase.auth.refreshSession();\r\n                if (error) {\r\n                    console.warn('Session refresh failed:', error.message);\r\n                    // If refresh fails, try to get current session\r\n                    const { data: { session: currentSession } } = await this.state.supabase.auth.getSession();\r\n                    if (!currentSession) {\r\n                        console.log('No valid session found, user may need to re-authenticate');\r\n                        this.state.setUser(null);\r\n                    }\r\n                } else if (session) {\r\n                    console.log('‚úÖ Session refreshed successfully for:', session.user.email);\r\n                    this.state.setUser(session.user);\r\n                    \r\n                    // Don't notify background script during routine refresh - causes connection errors\r\n                    // Background script will get session when needed via storage\r\n                }\r\n            } catch (error) {\r\n                console.error('‚ùå Error during session refresh:', error);\r\n            }\r\n        }, 30 * 60 * 1000); // 30 minutes\r\n    }\r\n\r\n    // Manually refresh user session\r\n    async refreshSession() {\r\n        if (!this.state.supabase) return null;\r\n\r\n        try {\r\n            const { data: { session }, error } = await this.state.supabase.auth.refreshSession();\r\n            if (error) throw error;\r\n\r\n            if (session) {\r\n                this.state.setUser(session.user);\r\n                \r\n                // Update background script\r\n                try {\r\n                    if (chrome.runtime && chrome.runtime.sendMessage) {\r\n                        await chrome.runtime.sendMessage({\r\n                            type: 'AUTH_STATE_CHANGED',\r\n                            data: { session }\r\n                        });\r\n                    }\r\n                } catch (error) {\r\n                    console.error('‚ùå Failed to update background script:', error);\r\n                }\r\n                \r\n                return session.user;\r\n            }\r\n            return null;\r\n        } catch (error) {\r\n            console.error('Session refresh error:', error);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n"],"names":["error"],"mappings":"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"}