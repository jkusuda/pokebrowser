{"version":3,"file":"background.js","sources":["../src/background/background.js"],"sourcesContent":["// Extension service worker - handles Pokemon catching, candy management, and auth state\r\n\r\nimport { CONFIG } from '../shared/config.js';\r\nimport { CANDY_FAMILY_MAP } from '../shared/evolution-data.js';\r\n\r\nlet currentUser = null;\r\nlet authToken = null;\r\n\r\n// Get base candy ID for Pokemon evolution family\r\nfunction getBaseCandyId(pokemonId) {\r\n    return CANDY_FAMILY_MAP[pokemonId] || pokemonId;\r\n}\r\n\r\n// Initialize authentication state on startup\r\nchrome.runtime.onStartup.addListener(async () => {\r\n    console.log('Extension startup - checking for existing session');\r\n    await initializeAuthState();\r\n});\r\n\r\nchrome.runtime.onInstalled.addListener(async () => {\r\n    console.log('Extension installed - checking for existing session');\r\n    await initializeAuthState();\r\n});\r\n\r\n// Load stored auth session from local storage\r\nasync function initializeAuthState() {\r\n    try {\r\n        const result = await chrome.storage.local.get('supabase_session');\r\n        console.log('üîç Background: Checking for stored supabase session:', result);\r\n        console.log('üîç Background: Session structure:', JSON.stringify(result.supabase_session, null, 2));\r\n        \r\n        if (result.supabase_session && result.supabase_session.user) {\r\n            currentUser = result.supabase_session.user;\r\n            authToken = result.supabase_session.access_token;\r\n            console.log('‚úÖ Background: User session restored for:', currentUser.email);\r\n            console.log('‚úÖ Background: Auth token present:', authToken ? 'yes' : 'no');\r\n        } else {\r\n            console.log('üì≠ Background: No stored supabase session found');\r\n        }\r\n    } catch (error) {\r\n        console.error('‚ùå Background: Error initializing auth state:', error);\r\n    }\r\n}\r\n\r\n// Wait for auth state to be available with retries\r\nasync function ensureAuthReady(maxRetries = 5, retryDelay = 1000) {\r\n    console.log('üîÑ Background: Ensuring auth is ready...');\r\n    \r\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\r\n        console.log(`üîç Background: Auth check attempt ${attempt}/${maxRetries}`);\r\n        \r\n        // Check if we already have auth state\r\n        if (currentUser && authToken) {\r\n            console.log('‚úÖ Background: Auth state already available');\r\n            return true;\r\n        }\r\n        \r\n        // Try to initialize auth state\r\n        await initializeAuthState();\r\n        \r\n        // Check again after initialization\r\n        if (currentUser && authToken) {\r\n            console.log(`‚úÖ Background: Auth state ready after ${attempt} attempts`);\r\n            return true;\r\n        }\r\n        \r\n        // If not the last attempt, wait before retrying\r\n        if (attempt < maxRetries) {\r\n            console.log(`‚è≥ Background: Waiting ${retryDelay}ms before retry...`);\r\n            await new Promise(resolve => setTimeout(resolve, retryDelay));\r\n        }\r\n    }\r\n    \r\n    console.log('‚ùå Background: Failed to establish auth state after all retries');\r\n    return false;\r\n}\r\n\r\n// Add Pokemon to user's ownership history in database\r\nasync function addToHistory(pokemonId) {\r\n    if (!currentUser) {\r\n        console.log('‚ùå User not authenticated, skipping history addition');\r\n        return { success: false, error: 'User not authenticated' };\r\n    }\r\n\r\n    try {\r\n        console.log(`üìö Adding Pokemon ${pokemonId} to history for user ${currentUser.email}`);\r\n\r\n        // First, check if Pokemon is already in history to avoid duplicate key error\r\n        const { pokemonHistory = [] } = await chrome.storage.local.get(['pokemonHistory']);\r\n        if (pokemonHistory.includes(pokemonId)) {\r\n            console.log(`üìã Pokemon ${pokemonId} already exists in local history, skipping database insert`);\r\n            return { success: true, alreadyExists: true };\r\n        }\r\n\r\n        console.log(`üîç Checking if Pokemon ${pokemonId} already exists in history`);\r\n        const checkResponse = await fetch(`${CONFIG.SUPABASE_URL}/rest/v1/pokemon_history?user_id=eq.${currentUser.id}&pokemon_id=eq.${pokemonId}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'apikey': CONFIG.SUPABASE_ANON_KEY,\r\n                'Authorization': `Bearer ${authToken || CONFIG.SUPABASE_ANON_KEY}`,\r\n                'Accept': 'application/json'\r\n            }\r\n        });\r\n\r\n        if (checkResponse.ok) {\r\n            const existingRecords = await checkResponse.json();\r\n            if (existingRecords && existingRecords.length > 0) {\r\n                console.log(`üìã Pokemon ${pokemonId} already exists in history, skipping database insert`);\r\n                return { success: true, alreadyExists: true };\r\n            }\r\n        }\r\n\r\n        // Pokemon doesn't exist in history, safe to insert\r\n        console.log(`üîó Making request to: ${CONFIG.SUPABASE_URL}/rest/v1/pokemon_history`);\r\n        console.log(`üìù Request body:`, { user_id: currentUser.id, pokemon_id: pokemonId });\r\n        \r\n        const response = await fetch(`${CONFIG.SUPABASE_URL}/rest/v1/pokemon_history`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'apikey': CONFIG.SUPABASE_ANON_KEY,\r\n                'Authorization': `Bearer ${authToken || CONFIG.SUPABASE_ANON_KEY}`\r\n            },\r\n            body: JSON.stringify({\r\n                user_id: currentUser.id,\r\n                pokemon_id: pokemonId,\r\n                first_caught_at: new Date().toISOString()\r\n            })\r\n        });\r\n\r\n        console.log(`üìä Response status: ${response.status} ${response.statusText}`);\r\n\r\n        if (response.ok) {\r\n            console.log(`‚úÖ Added Pokemon ${pokemonId} to history`);\r\n            \r\n            // Also add to local storage\r\n            const { pokemonHistory = [] } = await chrome.storage.local.get(['pokemonHistory']);\r\n            if (!pokemonHistory.includes(pokemonId)) {\r\n                pokemonHistory.push(pokemonId);\r\n                await chrome.storage.local.set({ pokemonHistory });\r\n                console.log(`‚úÖ Added Pokemon ${pokemonId} to local history`);\r\n            }\r\n            \r\n            return { success: true };\r\n        } else {\r\n            const errorText = await response.text();\r\n            console.error(`‚ùå Failed to add to history (${response.status}): ${errorText}`);\r\n            \r\n            // Still try to add to local storage as fallback\r\n            const { pokemonHistory = [] } = await chrome.storage.local.get(['pokemonHistory']);\r\n            if (!pokemonHistory.includes(pokemonId)) {\r\n                pokemonHistory.push(pokemonId);\r\n                await chrome.storage.local.set({ pokemonHistory });\r\n                console.log(`‚úÖ Added Pokemon ${pokemonId} to local history (fallback)`);\r\n            }\r\n            \r\n            return { success: true }; // Don't fail the operation for history issues\r\n        }\r\n    } catch (error) {\r\n        console.error('‚ùå Error adding to history:', error);\r\n        \r\n        // Try to add to local storage as fallback\r\n        try {\r\n            const { pokemonHistory = [] } = await chrome.storage.local.get(['pokemonHistory']);\r\n            if (!pokemonHistory.includes(pokemonId)) {\r\n                pokemonHistory.push(pokemonId);\r\n                await chrome.storage.local.set({ pokemonHistory });\r\n                console.log(`‚úÖ Added Pokemon ${pokemonId} to local history (fallback)`);\r\n            }\r\n        } catch (localError) {\r\n            console.error('‚ùå Error adding to local history:', localError);\r\n        }\r\n        \r\n        return { success: true }; // Don't fail the operation for history issues\r\n    }\r\n}\r\n\r\n// Remove candy from user's account (for evolution)\r\nasync function deductCandy(pokemonId, amount) {\r\n    if (!currentUser) {\r\n        console.log('‚ùå User not authenticated, skipping candy deduction');\r\n        return { success: false, error: 'User not authenticated' };\r\n    }\r\n\r\n    try {\r\n        console.log(`üç¨ Deducting ${amount} candies for Pokemon ${pokemonId} from user ${currentUser.email}`);\r\n\r\n        // Step 1: Get current candy count\r\n        const getCurrentResponse = await fetch(`${CONFIG.SUPABASE_URL}/rest/v1/candies?user_id=eq.${currentUser.id}&pokemon_id=eq.${pokemonId}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'apikey': CONFIG.SUPABASE_ANON_KEY,\r\n                'Authorization': `Bearer ${authToken || CONFIG.SUPABASE_ANON_KEY}`,\r\n                'Accept': 'application/vnd.pgrst.object+json'\r\n            }\r\n        });\r\n\r\n        let currentCount = 0;\r\n        let recordExists = false;\r\n\r\n        if (getCurrentResponse.ok) {\r\n            const existingRecord = await getCurrentResponse.json();\r\n            if (existingRecord && existingRecord.candy_count !== undefined) {\r\n                currentCount = existingRecord.candy_count;\r\n                recordExists = true;\r\n                console.log(`üìä Current candy count: ${currentCount}`);\r\n            }\r\n        }\r\n\r\n        // Check if we have enough candy\r\n        if (currentCount < amount) {\r\n            console.log(`‚ùå Insufficient candy: have ${currentCount}, need ${amount}`);\r\n            return { success: false, error: `Insufficient candy: have ${currentCount}, need ${amount}` };\r\n        }\r\n\r\n        const newCount = currentCount - amount;\r\n\r\n        // Step 2: Update existing record (should always exist if we got here)\r\n        if (recordExists) {\r\n            const updateResponse = await fetch(`${CONFIG.SUPABASE_URL}/rest/v1/candies?user_id=eq.${currentUser.id}&pokemon_id=eq.${pokemonId}`, {\r\n                method: 'PATCH',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'apikey': CONFIG.SUPABASE_ANON_KEY,\r\n                    'Authorization': `Bearer ${authToken || CONFIG.SUPABASE_ANON_KEY}`\r\n                },\r\n                body: JSON.stringify({\r\n                    candy_count: newCount,\r\n                    updated_at: new Date().toISOString()\r\n                })\r\n            });\r\n\r\n            if (updateResponse.ok) {\r\n                console.log(`‚úÖ Deducted ${amount} candy, new count: ${newCount} for Pokemon ${pokemonId}`);\r\n                return { success: true, newCount };\r\n            } else {\r\n                const errorText = await updateResponse.text();\r\n                throw new Error(`Update failed: ${errorText}`);\r\n            }\r\n        } else {\r\n            console.log(`‚ùå No candy record found for Pokemon ${pokemonId}`);\r\n            return { success: false, error: 'No candy record found' };\r\n        }\r\n    } catch (error) {\r\n        console.error('‚ùå Error deducting candy:', error);\r\n        return { success: false, error: error.message };\r\n    }\r\n}\r\n\r\n// Add candy to user's account (for catching/releasing)\r\nasync function addCandy(pokemonId, amount) {\r\n    if (!currentUser) {\r\n        console.log('‚ùå User not authenticated, skipping candy addition');\r\n        return { success: false, error: 'User not authenticated' };\r\n    }\r\n\r\n    try {\r\n        console.log(`üç¨ Adding ${amount} candies for Pokemon ${pokemonId} to user ${currentUser.email}`);\r\n\r\n        // Step 1: Get current candy count\r\n        const getCurrentResponse = await fetch(`${CONFIG.SUPABASE_URL}/rest/v1/candies?user_id=eq.${currentUser.id}&pokemon_id=eq.${pokemonId}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'apikey': CONFIG.SUPABASE_ANON_KEY,\r\n                'Authorization': `Bearer ${authToken || CONFIG.SUPABASE_ANON_KEY}`,\r\n                'Accept': 'application/vnd.pgrst.object+json'\r\n            }\r\n        });\r\n\r\n        let currentCount = 0;\r\n        let recordExists = false;\r\n\r\n        if (getCurrentResponse.ok) {\r\n            const existingRecord = await getCurrentResponse.json();\r\n            if (existingRecord && existingRecord.candy_count !== undefined) {\r\n                currentCount = existingRecord.candy_count;\r\n                recordExists = true;\r\n                console.log(`üìä Current candy count: ${currentCount}`);\r\n            }\r\n        }\r\n\r\n        const newCount = currentCount + amount;\r\n\r\n        // Step 2: Update or Insert\r\n        if (recordExists) {\r\n            // Update existing record\r\n            const updateResponse = await fetch(`${CONFIG.SUPABASE_URL}/rest/v1/candies?user_id=eq.${currentUser.id}&pokemon_id=eq.${pokemonId}`, {\r\n                method: 'PATCH',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'apikey': CONFIG.SUPABASE_ANON_KEY,\r\n                    'Authorization': `Bearer ${authToken || CONFIG.SUPABASE_ANON_KEY}`\r\n                },\r\n                body: JSON.stringify({\r\n                    candy_count: newCount,\r\n                    updated_at: new Date().toISOString()\r\n                })\r\n            });\r\n\r\n            if (updateResponse.ok) {\r\n                console.log(`‚úÖ Updated candy count to ${newCount} for Pokemon ${pokemonId}`);\r\n                return { success: true, newCount };\r\n            } else {\r\n                const errorText = await updateResponse.text();\r\n                throw new Error(`Update failed: ${errorText}`);\r\n            }\r\n        } else {\r\n            // Insert new record\r\n            const insertResponse = await fetch(`${CONFIG.SUPABASE_URL}/rest/v1/candies`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'apikey': CONFIG.SUPABASE_ANON_KEY,\r\n                    'Authorization': `Bearer ${authToken || CONFIG.SUPABASE_ANON_KEY}`\r\n                },\r\n                body: JSON.stringify({\r\n                    user_id: currentUser.id,\r\n                    pokemon_id: pokemonId,\r\n                    candy_count: newCount,\r\n                    created_at: new Date().toISOString(),\r\n                    updated_at: new Date().toISOString()\r\n                })\r\n            });\r\n\r\n            if (insertResponse.ok) {\r\n                console.log(`‚úÖ Inserted new candy record with count ${newCount} for Pokemon ${pokemonId}`);\r\n                return { success: true, newCount };\r\n            } else {\r\n                const errorText = await insertResponse.text();\r\n                throw new Error(`Insert failed: ${errorText}`);\r\n            }\r\n        }\r\n    } catch (error) {\r\n        console.error('‚ùå Error adding candy:', error);\r\n        return { success: false, error: error.message };\r\n    }\r\n}\r\n\r\n// Handle messages from popup, content scripts, and other extension parts\r\nchrome.runtime.onMessage.addListener(async (request, sender, sendResponse) => {\r\n    if (request.type === 'AUTH_STATE_CHANGED') {\r\n        console.log('üîê Background: Received AUTH_STATE_CHANGED message');\r\n        console.log('üîç Background: Session data:', request.data.session);\r\n        \r\n        // Store or remove the authentication session from local storage.\r\n        if (request.data.session) {\r\n            await chrome.storage.local.set({ 'supabase_session': request.data.session });\r\n            currentUser = request.data.session.user;\r\n            authToken = request.data.session.access_token;\r\n            console.log('‚úÖ Background: Auth state updated for user:', currentUser.email);\r\n            console.log('‚úÖ Background: Now in cloud mode - Pokemon will be saved to Supabase');\r\n        } else {\r\n            await chrome.storage.local.remove('supabase_session');\r\n            currentUser = null;\r\n            authToken = null;\r\n            console.log('üö™ Background: User logged out, auth state cleared');\r\n            console.log('‚úÖ Background: Now in local mode - Pokemon will be saved to local storage');\r\n        }\r\n        sendResponse({ success: true });\r\n        \r\n    } else if (request.type === 'CATCH_POKEMON') {\r\n        console.log('üéØ Background: Received CATCH_POKEMON message');\r\n        console.log('üîç Background: Current auth state - User:', currentUser?.email || 'none', 'Token:', authToken ? 'present' : 'none');\r\n        \r\n        const pokemon = request.data.pokemon;\r\n        \r\n        // First check if we already have auth state\r\n        if (currentUser && authToken) {\r\n            console.log('‚úÖ Background: Auth state already available, proceeding with Supabase save');\r\n        } else {\r\n            console.log('üîÑ Background: No immediate auth state, checking storage...');\r\n            // Check if user is logged in\r\n            const authReady = await ensureAuthReady();\r\n            \r\n            if (!authReady || !currentUser) {\r\n                console.log('üì± User is logged out - saving Pokemon to local storage (no candies)');\r\n                \r\n                try {\r\n                    // Save to local storage when logged out (no candies awarded)\r\n                    const result = await chrome.storage.local.get(['pokemonCollection']);\r\n                    const collection = result.pokemonCollection || [];\r\n                    \r\n                    collection.push(pokemon);\r\n                    await chrome.storage.local.set({ pokemonCollection: collection });\r\n                    \r\n                    // Add to local history\r\n                    const historyResult = await chrome.storage.local.get(['pokemonHistory']);\r\n                    const history = historyResult.pokemonHistory || [];\r\n                    if (!history.includes(pokemon.id)) {\r\n                        history.push(pokemon.id);\r\n                        await chrome.storage.local.set({ pokemonHistory: history });\r\n                    }\r\n                    \r\n                    console.log('‚úÖ Pokemon saved to local storage');\r\n                    \r\n                    // Notify popup that collection has been updated (if popup is open)\r\n                    try {\r\n                        await chrome.runtime.sendMessage({\r\n                            type: 'COLLECTION_UPDATED',\r\n                            data: { pokemon, source: 'local' }\r\n                        });\r\n                    } catch (messageError) {\r\n                        // Silently handle - popup may be closed or not listening\r\n                        console.log('Popup not available for collection update notification');\r\n                    }\r\n                    \r\n                    sendResponse({ success: true });\r\n                } catch (error) {\r\n                    console.error('‚ùå Error saving Pokemon to local storage:', error);\r\n                    sendResponse({ success: false, error: error.message });\r\n                }\r\n                return;\r\n            }\r\n        }\r\n        \r\n        // User is logged in, save to Supabase\r\n        if (currentUser && authToken) {\r\n            console.log('üîÑ User is logged in - saving Pokemon directly to Supabase');\r\n            \r\n            try {\r\n                // Save directly to Supabase when logged in\r\n                const response = await fetch(`${CONFIG.SUPABASE_URL}/rest/v1/pokemon`, {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        'apikey': CONFIG.SUPABASE_ANON_KEY,\r\n                        'Authorization': `Bearer ${authToken}`\r\n                    },\r\n                    body: JSON.stringify({\r\n                        user_id: currentUser.id,\r\n                        pokemon_id: pokemon.id,\r\n                        name: pokemon.name,\r\n                        species: pokemon.species || pokemon.name,\r\n                        level: pokemon.level,\r\n                        shiny: pokemon.shiny,\r\n                        site_caught: pokemon.site,\r\n                        caught_at: pokemon.caughtAt\r\n                    })\r\n                });\r\n\r\n                if (!response.ok) {\r\n                    const errorText = await response.text();\r\n                    throw new Error(`Failed to save Pokemon to Supabase: ${errorText}`);\r\n                }\r\n\r\n                // Add to pokemon_history table\r\n                await addToHistory(pokemon.id);\r\n\r\n                console.log('‚úÖ Pokemon saved directly to Supabase');\r\n                \r\n                // Add candy for logged-in users\r\n                const baseCandyId = getBaseCandyId(pokemon.id);\r\n                const candyResult = await addCandy(baseCandyId, 3);\r\n                \r\n                // Notify popup that collection has been updated (if popup is open)\r\n                try {\r\n                    await chrome.runtime.sendMessage({\r\n                        type: 'COLLECTION_UPDATED',\r\n                        data: { pokemon, source: 'supabase' }\r\n                    });\r\n                } catch (messageError) {\r\n                    // Silently handle - popup may be closed or not listening\r\n                    console.log('Popup not available for collection update notification');\r\n                }\r\n                \r\n                sendResponse({ success: true, candyResult });\r\n            } catch (error) {\r\n                console.error('‚ùå Error saving Pokemon to Supabase:', error);\r\n                sendResponse({ success: false, error: error.message });\r\n            }\r\n        } else {\r\n            console.log('üì± User is logged out - saving Pokemon to local storage (no candies)');\r\n            \r\n            try {\r\n                // Save to local storage when logged out (no candies awarded)\r\n                const result = await chrome.storage.local.get(['pokemonCollection']);\r\n                const collection = result.pokemonCollection || [];\r\n                \r\n                collection.push(pokemon);\r\n                await chrome.storage.local.set({ pokemonCollection: collection });\r\n                \r\n                // Add to local history\r\n                const historyResult = await chrome.storage.local.get(['pokemonHistory']);\r\n                const history = historyResult.pokemonHistory || [];\r\n                if (!history.includes(pokemon.id)) {\r\n                    history.push(pokemon.id);\r\n                    await chrome.storage.local.set({ pokemonHistory: history });\r\n                }\r\n                \r\n                console.log('‚úÖ Pokemon saved to local storage');\r\n                \r\n                // Notify popup that collection has been updated (if popup is open)\r\n                try {\r\n                    await chrome.runtime.sendMessage({\r\n                        type: 'COLLECTION_UPDATED',\r\n                        data: { pokemon, source: 'local' }\r\n                    });\r\n                } catch (messageError) {\r\n                    // Silently handle - popup may be closed or not listening\r\n                    console.log('Popup not available for collection update notification');\r\n                }\r\n                \r\n                sendResponse({ success: true });\r\n            } catch (error) {\r\n                console.error('‚ùå Error saving Pokemon to local storage:', error);\r\n                sendResponse({ success: false, error: error.message });\r\n            }\r\n        }\r\n        \r\n    } else if (request.type === 'POKEMON_CAUGHT') {\r\n        console.log('üéØ Background: Received POKEMON_CAUGHT message (legacy)');\r\n        \r\n        const authReady = await ensureAuthReady();\r\n        if (!authReady) {\r\n            console.log('‚ùå Background: Authentication failed, cannot process Pokemon catch');\r\n            sendResponse({ success: false, error: 'Authentication not available' });\r\n            return;\r\n        }\r\n        \r\n        const pokemon = request.data.pokemon;\r\n        \r\n        // Add to history\r\n        await addToHistory(pokemon.id);\r\n\r\n        // Save Pokemon to Supabase\r\n        const response = await fetch(`${CONFIG.SUPABASE_URL}/rest/v1/pokemon`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'apikey': CONFIG.SUPABASE_ANON_KEY,\r\n                'Authorization': `Bearer ${authToken}`\r\n            },\r\n            body: JSON.stringify({\r\n                user_id: currentUser.id,\r\n                pokemon_id: pokemon.id,\r\n                name: pokemon.name,\r\n                species: pokemon.species || pokemon.name,\r\n                level: pokemon.level,\r\n                shiny: pokemon.shiny,\r\n                site_caught: pokemon.site,\r\n                caught_at: pokemon.caughtAt\r\n            })\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const errorText = await response.text();\r\n            console.error('‚ùå Failed to save Pokemon to Supabase:', errorText);\r\n            sendResponse({ success: false, error: errorText });\r\n            return;\r\n        }\r\n        \r\n        // Add candy\r\n        const baseCandyId = getBaseCandyId(pokemon.id);\r\n        const result = await addCandy(baseCandyId, 3);\r\n        sendResponse(result);\r\n        \r\n    } else if (request.type === 'POKEMON_RELEASED') {\r\n        const result = await addCandy(request.data.pokemon.id, 1);\r\n        sendResponse(result);\r\n        \r\n    } else if (request.type === 'POKEMON_EVOLVED') {\r\n        console.log('üîÑ Background: Received POKEMON_EVOLVED message');\r\n        \r\n        // Deduct candy for evolution\r\n        const result = await deductCandy(request.data.pokemon.id, request.data.candyCost);\r\n        sendResponse(result);\r\n        \r\n    } else {\r\n        sendResponse({ success: false, error: 'Unknown message type' });\r\n    }\r\n    \r\n    return true; // Keep the message channel open for async responses\r\n});\r\n\r\n// Initialize auth state when script loads\r\ninitializeAuthState();\r\n"],"names":["pokemonHistory"],"mappings":"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"}