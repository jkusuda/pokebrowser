{"version":3,"file":"pokemon-entry.js","sources":["../../../src/pokemon-entry/components/LoadingState.jsx","../../../src/pokemon-entry/components/ErrorState.jsx","../../../src/pokemon-entry/components/PokemonDetails.jsx","../../../src/pokemon-entry/PokemonEntryApp.jsx","../../../src/pokemon-entry/main.jsx"],"sourcesContent":["import React from 'react';\r\n\r\nconst LoadingState = () => {\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"loading\">\r\n        <div className=\"loading-text\">Loading Pokemon...</div>\r\n        <div className=\"pokeball-spinner\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadingState;\r\n","import React from 'react';\r\n\r\nconst ErrorState = () => {\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"error\">\r\n        <div style={{ fontSize: '24px', marginBottom: '10px' }}>‚ùå</div>\r\n        <div style={{ fontSize: '18px', fontWeight: 'bold' }}>Pokemon Not Found</div>\r\n        <div style={{ fontSize: '14px', marginTop: '5px' }}>\r\n          Please check the Pokemon ID and try again.\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ErrorState;\r\n","import React, { useEffect, useRef } from 'react';\r\nimport { CONFIG } from '../../shared/config.js';\r\nimport { Utils } from '../../utils/Utils.js';\r\nimport { TypeUtils } from '../../utils/TypeUtils.js';\r\n\r\nconst PokemonDetails = ({ pokemonData, speciesData, historyData }) => {\r\n  const cardFrameRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Apply type background when component mounts or data changes\r\n    if (pokemonData && cardFrameRef.current) {\r\n      TypeUtils.applyTypeBackground(pokemonData.types, cardFrameRef.current);\r\n    }\r\n  }, [pokemonData]);\r\n\r\n  const formatFirstCaughtDate = (historyData) => {\r\n    console.log('üîß React: formatFirstCaughtDate called with:', historyData);\r\n    \r\n    if (!historyData) {\r\n      console.log('‚ùå React: No history data provided');\r\n      return 'First catch date not available';\r\n    }\r\n\r\n    // Try different possible date field names\r\n    const dateField = historyData.first_caught_at || historyData.created_at || historyData.caught_at;\r\n    \r\n    console.log('üìÖ React: Date field value:', dateField);\r\n    console.log('üìÖ React: Date field type:', typeof dateField);\r\n    \r\n    if (!dateField) {\r\n      console.log('‚ùå React: No date field found in history data');\r\n      return 'First catch date not available';\r\n    }\r\n\r\n    // Parse the date\r\n    let date;\r\n    if (typeof dateField === 'string') {\r\n      date = new Date(dateField);\r\n    } else if (dateField instanceof Date) {\r\n      date = dateField;\r\n    } else if (typeof dateField === 'number') {\r\n      date = new Date(dateField);\r\n    } else {\r\n      console.log('‚ùå React: Unknown date field type:', typeof dateField);\r\n      return 'Unknown date format';\r\n    }\r\n    \r\n    console.log('üìÖ React: Parsed date object:', date);\r\n    console.log('üìÖ React: Date valid?', !isNaN(date.getTime()));\r\n    \r\n    // Validate date\r\n    const now = new Date();\r\n    const oneYearAgo = new Date(now.getFullYear() - 1, now.getMonth(), now.getDate());\r\n    \r\n    if (!isNaN(date.getTime()) && date <= now && date >= oneYearAgo) {\r\n      try {\r\n        const formattedDate = `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`;\r\n        const formattedTime = date.toLocaleTimeString('en-US', { \r\n          hour: 'numeric', \r\n          minute: '2-digit', \r\n          hour12: true \r\n        });\r\n        \r\n        const finalText = `First caught: ${formattedDate} at ${formattedTime}`;\r\n        console.log('‚úÖ React: Returning formatted date:', finalText);\r\n        return finalText;\r\n      } catch (formatError) {\r\n        console.log('‚ùå React: Date formatting failed:', formatError);\r\n        return 'Date formatting error';\r\n      }\r\n    } else if (!isNaN(date.getTime())) {\r\n      console.log('‚ùå React: Date outside reasonable range:', date);\r\n      return 'Date unavailable';\r\n    } else {\r\n      console.log('‚ùå React: Date parsing failed - invalid date');\r\n      return 'Invalid date';\r\n    }\r\n  };\r\n\r\n  const getDescription = (speciesData) => {\r\n    if (!speciesData || !speciesData.flavor_text_entries) {\r\n      return 'No description available.';\r\n    }\r\n    \r\n    const flavorTextEntry = speciesData.flavor_text_entries.find(entry => entry.language.name === 'en');\r\n    if (flavorTextEntry) {\r\n      return `\"${flavorTextEntry.flavor_text.replace(/[\\n\\f]/g, ' ')}\"`;\r\n    }\r\n    \r\n    return 'No description available.';\r\n  };\r\n\r\n  if (!pokemonData || !speciesData) {\r\n    return null;\r\n  }\r\n\r\n  const spriteUrl = `${CONFIG.ANIMATED_SPRITE_BASE_URL}/${pokemonData.id}.gif`;\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div id=\"pokemon-details\">\r\n        <div id=\"card-frame\" className=\"card-frame\" ref={cardFrameRef}>\r\n          <div className=\"white-card\">\r\n            <div className=\"sprite-container\">\r\n              <img \r\n                className=\"pokemon-img\" \r\n                src={spriteUrl}\r\n                alt={pokemonData.name}\r\n              />\r\n            </div>\r\n\r\n            <h2 className=\"name\">{Utils.capitalizeFirst(pokemonData.name)}</h2>\r\n            <p className=\"number\">#{String(pokemonData.id).padStart(3, '0')}</p>\r\n\r\n            <div className=\"divider\"></div>\r\n\r\n            <div className=\"info-row\">\r\n              <span className=\"value\">{pokemonData.height / 10} m</span>\r\n              <div \r\n                className=\"types\" \r\n                dangerouslySetInnerHTML={{ \r\n                  __html: TypeUtils.createTypeIconsHTML(pokemonData.types) \r\n                }}\r\n              />\r\n              <span className=\"value\">{pokemonData.weight / 10} kg</span>\r\n              <span className=\"label\">HEIGHT</span>\r\n              <span className=\"label\">{TypeUtils.formatTypesLabel(pokemonData.types)}</span>\r\n              <span className=\"label\">WEIGHT</span>\r\n            </div>\r\n\r\n            <div className=\"divider\"></div>\r\n\r\n            <div className=\"description\">\r\n              {getDescription(speciesData)}\r\n            </div>\r\n\r\n            <div className=\"footer\">\r\n              <p>FIRST CAUGHT ON<br/>\r\n              <span>{formatFirstCaughtDate(historyData)}</span></p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PokemonDetails;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { APIService } from '../services/ApiService.js';\r\nimport { HistoryService } from '../services/HistoryService.js';\r\nimport { AuthService } from '../services/AuthService.js';\r\nimport { AppState } from '../utils/AppState.js';\r\nimport { Utils } from '../utils/Utils.js';\r\nimport LoadingState from './components/LoadingState.jsx';\r\nimport ErrorState from './components/ErrorState.jsx';\r\nimport PokemonDetails from './components/PokemonDetails.jsx';\r\n\r\nconst PokemonEntryApp = () => {\r\n  const [viewState, setViewState] = useState('loading'); // 'loading', 'error', 'details'\r\n  const [pokemonData, setPokemonData] = useState(null);\r\n  const [speciesData, setSpeciesData] = useState(null);\r\n  const [historyData, setHistoryData] = useState(null);\r\n  const [cache] = useState(() => new Map());\r\n  const [state] = useState(() => new AppState());\r\n  const [auth] = useState(() => new AuthService(state));\r\n\r\n  useEffect(() => {\r\n    initializePokemonEntry();\r\n  }, []);\r\n\r\n  const initializePokemonEntry = async () => {\r\n    setViewState('loading');\r\n    \r\n    try {\r\n      const params = Utils.parseURLParams();\r\n      const pokemonId = params.id;\r\n\r\n      if (!pokemonId) {\r\n        throw new Error('No Pok√©mon ID provided.');\r\n      }\r\n\r\n      console.log('üîß PokemonEntry: Loading Pokemon', pokemonId);\r\n\r\n      // Fetch Pokemon data\r\n      const [pokemon, species] = await Promise.all([\r\n        APIService.fetchPokemonData(pokemonId, cache),\r\n        APIService.fetchSpeciesData(pokemonId, cache)\r\n      ]);\r\n\r\n      setPokemonData(pokemon);\r\n      setSpeciesData(species);\r\n\r\n      // Initialize authentication and get history data\r\n      let history = null;\r\n      try {\r\n        console.log('üîß PokemonEntry: Initializing authentication...');\r\n        const client = await auth.initializeSupabase();\r\n        state.setSupabase(client);\r\n        const user = await auth.initializeAuth();\r\n        state.setUser(user);\r\n        \r\n        console.log('üîß PokemonEntry: Auth initialized, user:', user?.email);\r\n        \r\n        if (user) {\r\n          const historyService = new HistoryService(state);\r\n          history = await historyService.getFirstCaughtData(parseInt(pokemonId));\r\n          console.log('üìö History data:', history);\r\n        } else {\r\n          console.log('üîß PokemonEntry: No authenticated user found');\r\n        }\r\n      } catch (error) {\r\n        console.error('‚ùå Error with authentication or history data:', error);\r\n        // Continue without history data\r\n      }\r\n\r\n      setHistoryData(history);\r\n      setViewState('details');\r\n      \r\n    } catch (error) {\r\n      console.error('Error initializing Pok√©mon entry page:', error);\r\n      setViewState('error');\r\n    }\r\n  };\r\n\r\n  if (viewState === 'loading') {\r\n    return <LoadingState />;\r\n  }\r\n\r\n  if (viewState === 'error') {\r\n    return <ErrorState />;\r\n  }\r\n\r\n  return (\r\n    <PokemonDetails \r\n      pokemonData={pokemonData}\r\n      speciesData={speciesData}\r\n      historyData={historyData}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PokemonEntryApp;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport PokemonEntryApp from './PokemonEntryApp.jsx';\r\n\r\nReactDOM.createRoot(document.getElementById('pokemon-entry-root')).render(\r\n  <React.StrictMode>\r\n    <PokemonEntryApp />\r\n  </React.StrictMode>\r\n);\r\n"],"names":["jsxs","jsx","useRef","useEffect","historyData","speciesData","useState","client","ReactDOM"],"mappings":"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"}